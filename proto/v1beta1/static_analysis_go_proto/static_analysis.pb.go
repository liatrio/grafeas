// Copyright 2020 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This metadata type is heavily inspired and based on https://docs.sonarqube.org/latest/user-guide/metric-definitions/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: static_analysis.proto

package static_analysis_go_proto

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	source_go_proto "github.com/grafeas/grafeas/proto/v1beta1/source_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Rating defines a common scoring system to use in different code quality dimensions.
type Rating int32

const (
	Rating_A Rating = 0
	Rating_B Rating = 1
	Rating_C Rating = 2
	Rating_D Rating = 3
	Rating_E Rating = 4
)

// Enum value maps for Rating.
var (
	Rating_name = map[int32]string{
		0: "A",
		1: "B",
		2: "C",
		3: "D",
		4: "E",
	}
	Rating_value = map[string]int32{
		"A": 0,
		"B": 1,
		"C": 2,
		"D": 3,
		"E": 4,
	}
)

func (x Rating) Enum() *Rating {
	p := new(Rating)
	*p = x
	return p
}

func (x Rating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rating) Descriptor() protoreflect.EnumDescriptor {
	return file_static_analysis_proto_enumTypes[0].Descriptor()
}

func (Rating) Type() protoreflect.EnumType {
	return &file_static_analysis_proto_enumTypes[0]
}

func (x Rating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rating.Descriptor instead.
func (Rating) EnumDescriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{0}
}

// Code Complexity
type Complexity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cyclomatic Complexity calculated based on the number of paths through the code.
	// Whenever the control flow of a function splits, the complexity counter gets incremented by one.
	// Each function has a minimum complexity of 1.
	// This calculation varies slightly by language because keywords and functionalities do.
	Cyclomatic uint32 `protobuf:"varint,1,opt,name=cyclomatic,proto3" json:"cyclomatic,omitempty"`
	// How hard it is to understand the code's control flow.
	// See https://www.sonarsource.com/resources/white-papers/cognitive-complexity.html
	// for a complete description of the mathematical model applied to compute this measure.
	Cognitive uint32 `protobuf:"varint,2,opt,name=cognitive,proto3" json:"cognitive,omitempty"`
	// Optional list of findings (complexities)
	Findings []*Finding `protobuf:"bytes,3,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Complexity) Reset() {
	*x = Complexity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Complexity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Complexity) ProtoMessage() {}

func (x *Complexity) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Complexity.ProtoReflect.Descriptor instead.
func (*Complexity) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *Complexity) GetCyclomatic() uint32 {
	if x != nil {
		return x.Cyclomatic
	}
	return 0
}

func (x *Complexity) GetCognitive() uint32 {
	if x != nil {
		return x.Cognitive
	}
	return 0
}

func (x *Complexity) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

// Code duplication
type Duplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of duplicated blocks of lines.
	Blocks uint32 `protobuf:"varint,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// Number of files involved in duplications.
	Files uint32 `protobuf:"varint,2,opt,name=files,proto3" json:"files,omitempty"`
	// Number of lines involved in duplications.
	Lines uint32 `protobuf:"varint,3,opt,name=lines,proto3" json:"lines,omitempty"`
	// The ratio of duplicated lines in relation to the total number of lines.
	// duplicated_lines / lines * 100
	LinesDensity float32 `protobuf:"fixed32,4,opt,name=lines_density,json=linesDensity,proto3" json:"lines_density,omitempty"`
	// Optional list of findings (duplications)
	Findings []*Finding `protobuf:"bytes,5,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Duplication) Reset() {
	*x = Duplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duplication) ProtoMessage() {}

func (x *Duplication) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duplication.ProtoReflect.Descriptor instead.
func (*Duplication) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *Duplication) GetBlocks() uint32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *Duplication) GetFiles() uint32 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *Duplication) GetLines() uint32 {
	if x != nil {
		return x.Lines
	}
	return 0
}

func (x *Duplication) GetLinesDensity() float32 {
	if x != nil {
		return x.LinesDensity
	}
	return 0
}

func (x *Duplication) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

// Maintainability of the code or Software Quality Assessment based on Lifecycle Expectations (SQALE)
type Maintainability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of Code Smell issues.
	CodeSmells uint64 `protobuf:"varint,1,opt,name=code_smells,json=codeSmells,proto3" json:"code_smells,omitempty"`
	// Total count of Code Smell issues raised for the first time on New Code.
	NewCodeSmells uint64 `protobuf:"varint,2,opt,name=new_code_smells,json=newCodeSmells,proto3" json:"new_code_smells,omitempty"`
	// Rating given to your project related to the value of your sqale_debt_ratio. Values can be A, B, C, D or E.
	SqaleRating Rating `protobuf:"varint,3,opt,name=sqale_rating,json=sqaleRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"sqale_rating,omitempty"`
	// Effort to fix all Code Smells, in minutes.
	SqaleIndex uint32 `protobuf:"varint,4,opt,name=sqale_index,json=sqaleIndex,proto3" json:"sqale_index,omitempty"`
	// Effort to fix all Code Smells raised for the first time on New Code.
	NewTechnicalDebt uint32 `protobuf:"varint,5,opt,name=new_technical_debt,json=newTechnicalDebt,proto3" json:"new_technical_debt,omitempty"`
	// Ratio between the cost to develop the software and the cost to fix it.
	// Ratio formula is: Remediation cost / Development cost
	// Which can be restated as:
	// Remediation cost / (Cost to develop 1 line of code * Number of lines of code)
	// The value of the cost to develop a line of code is 0.06 days.
	SqaleDebtRatio float32 `protobuf:"fixed32,6,opt,name=sqale_debt_ratio,json=sqaleDebtRatio,proto3" json:"sqale_debt_ratio,omitempty"`
	// Ratio between the cost to develop the code changed on New Code and the cost of the issues linked to it.
	NewSqaleDebtRatio float32 `protobuf:"fixed32,7,opt,name=new_sqale_debt_ratio,json=newSqaleDebtRatio,proto3" json:"new_sqale_debt_ratio,omitempty"`
	// Optional list of findings (code smells)
	Findings []*Finding `protobuf:"bytes,8,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Maintainability) Reset() {
	*x = Maintainability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintainability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainability) ProtoMessage() {}

func (x *Maintainability) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainability.ProtoReflect.Descriptor instead.
func (*Maintainability) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *Maintainability) GetCodeSmells() uint64 {
	if x != nil {
		return x.CodeSmells
	}
	return 0
}

func (x *Maintainability) GetNewCodeSmells() uint64 {
	if x != nil {
		return x.NewCodeSmells
	}
	return 0
}

func (x *Maintainability) GetSqaleRating() Rating {
	if x != nil {
		return x.SqaleRating
	}
	return Rating_A
}

func (x *Maintainability) GetSqaleIndex() uint32 {
	if x != nil {
		return x.SqaleIndex
	}
	return 0
}

func (x *Maintainability) GetNewTechnicalDebt() uint32 {
	if x != nil {
		return x.NewTechnicalDebt
	}
	return 0
}

func (x *Maintainability) GetSqaleDebtRatio() float32 {
	if x != nil {
		return x.SqaleDebtRatio
	}
	return 0
}

func (x *Maintainability) GetNewSqaleDebtRatio() float32 {
	if x != nil {
		return x.NewSqaleDebtRatio
	}
	return 0
}

func (x *Maintainability) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Reliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of bug issues.
	Bugs uint32 `protobuf:"varint,1,opt,name=bugs,proto3" json:"bugs,omitempty"`
	// Number of new bug issues.
	NewBugs uint32 `protobuf:"varint,2,opt,name=new_bugs,json=newBugs,proto3" json:"new_bugs,omitempty"`
	// Rating given based on the number of bugs and their criticality
	Rating Rating `protobuf:"varint,3,opt,name=rating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"rating,omitempty"`
	// Rating based on new code
	NewReliabilityRating Rating `protobuf:"varint,4,opt,name=new_reliability_rating,json=newReliabilityRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"new_reliability_rating,omitempty"`
	// Effort to fix all bug issues, in minutes.
	RemediationEffort uint32 `protobuf:"varint,5,opt,name=remediation_effort,json=remediationEffort,proto3" json:"remediation_effort,omitempty"`
	// Same as Reliability remediation effort but on the code changed on New Code.
	NewReliabilityRemediationEffort uint32 `protobuf:"varint,6,opt,name=new_reliability_remediation_effort,json=newReliabilityRemediationEffort,proto3" json:"new_reliability_remediation_effort,omitempty"`
	// Optional list of findings (bugs)
	Findings []*Finding `protobuf:"bytes,7,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Reliability) Reset() {
	*x = Reliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reliability) ProtoMessage() {}

func (x *Reliability) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reliability.ProtoReflect.Descriptor instead.
func (*Reliability) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *Reliability) GetBugs() uint32 {
	if x != nil {
		return x.Bugs
	}
	return 0
}

func (x *Reliability) GetNewBugs() uint32 {
	if x != nil {
		return x.NewBugs
	}
	return 0
}

func (x *Reliability) GetRating() Rating {
	if x != nil {
		return x.Rating
	}
	return Rating_A
}

func (x *Reliability) GetNewReliabilityRating() Rating {
	if x != nil {
		return x.NewReliabilityRating
	}
	return Rating_A
}

func (x *Reliability) GetRemediationEffort() uint32 {
	if x != nil {
		return x.RemediationEffort
	}
	return 0
}

func (x *Reliability) GetNewReliabilityRemediationEffort() uint32 {
	if x != nil {
		return x.NewReliabilityRemediationEffort
	}
	return 0
}

func (x *Reliability) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of vulnerability issues.
	Vulnerabilities uint32 `protobuf:"varint,1,opt,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	// Number of vulnerability issues on new code.
	NewVulnerabilities uint32 `protobuf:"varint,2,opt,name=new_vulnerabilities,json=newVulnerabilities,proto3" json:"new_vulnerabilities,omitempty"`
	// Security rating letter.
	SecurityRating Rating `protobuf:"varint,3,opt,name=security_rating,json=securityRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"security_rating,omitempty"`
	// Effort to fix all vulnerability issues, in minutes
	SecurityRemediationEffort uint32 `protobuf:"varint,4,opt,name=security_remediation_effort,json=securityRemediationEffort,proto3" json:"security_remediation_effort,omitempty"`
	// Same as Security remediation effort but on the code changed on New Code
	NewSecurityRemediationEffort uint32 `protobuf:"varint,5,opt,name=new_security_remediation_effort,json=newSecurityRemediationEffort,proto3" json:"new_security_remediation_effort,omitempty"`
	// Number of Security hotspots
	SecurityHotspots uint32 `protobuf:"varint,6,opt,name=security_hotspots,json=securityHotspots,proto3" json:"security_hotspots,omitempty"`
	// Security hotspots on new code
	NewSecurityHotspots uint32 `protobuf:"varint,7,opt,name=new_security_hotspots,json=newSecurityHotspots,proto3" json:"new_security_hotspots,omitempty"`
	// Letter grade based on the percentage of reviewed security hotspots
	SecurityReviewRating Rating `protobuf:"varint,8,opt,name=security_review_rating,json=securityReviewRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"security_review_rating,omitempty"`
	// Letter grade based on the percentage of reviewed security hotspots for new code
	NewSecurityReviewRating Rating `protobuf:"varint,9,opt,name=new_security_review_rating,json=newSecurityReviewRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"new_security_review_rating,omitempty"`
	// Percentage of review security hotspots (review hotspots x 100)/(to_review hotspots + review hotspots)
	SecurityHotspotsReviewed float32 `protobuf:"fixed32,10,opt,name=security_hotspots_reviewed,json=securityHotspotsReviewed,proto3" json:"security_hotspots_reviewed,omitempty"`
	// Optional list of findings (vulnerabilites)
	Findings []*Finding `protobuf:"bytes,11,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{4}
}

func (x *Security) GetVulnerabilities() uint32 {
	if x != nil {
		return x.Vulnerabilities
	}
	return 0
}

func (x *Security) GetNewVulnerabilities() uint32 {
	if x != nil {
		return x.NewVulnerabilities
	}
	return 0
}

func (x *Security) GetSecurityRating() Rating {
	if x != nil {
		return x.SecurityRating
	}
	return Rating_A
}

func (x *Security) GetSecurityRemediationEffort() uint32 {
	if x != nil {
		return x.SecurityRemediationEffort
	}
	return 0
}

func (x *Security) GetNewSecurityRemediationEffort() uint32 {
	if x != nil {
		return x.NewSecurityRemediationEffort
	}
	return 0
}

func (x *Security) GetSecurityHotspots() uint32 {
	if x != nil {
		return x.SecurityHotspots
	}
	return 0
}

func (x *Security) GetNewSecurityHotspots() uint32 {
	if x != nil {
		return x.NewSecurityHotspots
	}
	return 0
}

func (x *Security) GetSecurityReviewRating() Rating {
	if x != nil {
		return x.SecurityReviewRating
	}
	return Rating_A
}

func (x *Security) GetNewSecurityReviewRating() Rating {
	if x != nil {
		return x.NewSecurityReviewRating
	}
	return Rating_A
}

func (x *Security) GetSecurityHotspotsReviewed() float32 {
	if x != nil {
		return x.SecurityHotspotsReviewed
	}
	return 0
}

func (x *Security) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type CodeSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of classes
	Classes uint32 `protobuf:"varint,1,opt,name=classes,proto3" json:"classes,omitempty"`
	// Number of lines containing either comment or commented-out code.
	// Non-significant comment lines (empty comment lines, comment lines containing only
	// special characters, etc.) do not increase the number of comment lines.
	CommentLines uint32 `protobuf:"varint,2,opt,name=comment_lines,json=commentLines,proto3" json:"comment_lines,omitempty"`
	// Density of comment lines = Comment lines / (Lines of code + Comment lines) * 100
	// With such a formula:
	// 50% means that the number of lines of code equals the number of comment lines
	// 100% means that the file only contains comment lines
	CommentLinesDensity float32 `protobuf:"fixed32,3,opt,name=comment_lines_density,json=commentLinesDensity,proto3" json:"comment_lines_density,omitempty"`
	// Number of directories.
	Directories uint32 `protobuf:"varint,4,opt,name=directories,proto3" json:"directories,omitempty"`
	// Number of files.
	Files uint64 `protobuf:"varint,5,opt,name=files,proto3" json:"files,omitempty"`
	// Number of physical lines (number of carriage returns).
	Lines uint64 `protobuf:"varint,6,opt,name=lines,proto3" json:"lines,omitempty"`
	// Lines of code. Number of physical lines that contain at least one character which is neither a whitespace nor
	// a tabulation nor part of a comment.
	Ncloc uint64 `protobuf:"varint,7,opt,name=ncloc,proto3" json:"ncloc,omitempty"`
	// Number of functions. Depending on the language, a function is either a function or a method or a paragraph.
	Functions uint64 `protobuf:"varint,8,opt,name=functions,proto3" json:"functions,omitempty"`
	// Number of statements.
	Statements uint64 `protobuf:"varint,9,opt,name=statements,proto3" json:"statements,omitempty"`
	// Optional list of findings (code size)
	Findings []*Finding `protobuf:"bytes,10,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *CodeSize) Reset() {
	*x = CodeSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSize) ProtoMessage() {}

func (x *CodeSize) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSize.ProtoReflect.Descriptor instead.
func (*CodeSize) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{5}
}

func (x *CodeSize) GetClasses() uint32 {
	if x != nil {
		return x.Classes
	}
	return 0
}

func (x *CodeSize) GetCommentLines() uint32 {
	if x != nil {
		return x.CommentLines
	}
	return 0
}

func (x *CodeSize) GetCommentLinesDensity() float32 {
	if x != nil {
		return x.CommentLinesDensity
	}
	return 0
}

func (x *CodeSize) GetDirectories() uint32 {
	if x != nil {
		return x.Directories
	}
	return 0
}

func (x *CodeSize) GetFiles() uint64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *CodeSize) GetLines() uint64 {
	if x != nil {
		return x.Lines
	}
	return 0
}

func (x *CodeSize) GetNcloc() uint64 {
	if x != nil {
		return x.Ncloc
	}
	return 0
}

func (x *CodeSize) GetFunctions() uint64 {
	if x != nil {
		return x.Functions
	}
	return 0
}

func (x *CodeSize) GetStatements() uint64 {
	if x != nil {
		return x.Statements
	}
	return 0
}

func (x *CodeSize) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Issues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of issues in all states.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// // Total count of issues on New code
	NewTotal uint32 `protobuf:"varint,2,opt,name=new_total,json=newTotal,proto3" json:"new_total,omitempty"`
	// Total count of blocking issues.
	Blocker uint32 `protobuf:"varint,3,opt,name=blocker,proto3" json:"blocker,omitempty"`
	// Total count of critical issues.
	Critical uint32 `protobuf:"varint,4,opt,name=critical,proto3" json:"critical,omitempty"`
	// Total count of major issues.
	Major uint32 `protobuf:"varint,5,opt,name=major,proto3" json:"major,omitempty"`
	// Total count of minor issues.
	Minor uint32 `protobuf:"varint,6,opt,name=minor,proto3" json:"minor,omitempty"`
	// Total count of info issues.
	Info uint32 `protobuf:"varint,7,opt,name=info,proto3" json:"info,omitempty"`
	// Total count of blocking issues on New Code.
	NewBlocker uint32 `protobuf:"varint,8,opt,name=new_blocker,json=newBlocker,proto3" json:"new_blocker,omitempty"`
	// Total count of critical issues on New Code.
	NewCritical uint32 `protobuf:"varint,9,opt,name=new_critical,json=newCritical,proto3" json:"new_critical,omitempty"`
	// Total count of major issues on New Code.
	NewMajor uint32 `protobuf:"varint,10,opt,name=new_major,json=newMajor,proto3" json:"new_major,omitempty"`
	// Total count of minor issues on New Code.
	NewMinor uint32 `protobuf:"varint,11,opt,name=new_minor,json=newMinor,proto3" json:"new_minor,omitempty"`
	// Total count of info issues on New Code.
	NewInfo uint32 `protobuf:"varint,12,opt,name=new_info,json=newInfo,proto3" json:"new_info,omitempty"`
	// Total count of issues marked False Positive.
	FalsePositives uint32 `protobuf:"varint,13,opt,name=false_positives,json=falsePositives,proto3" json:"false_positives,omitempty"`
	// Total count of issues in the Open state.
	Open uint32 `protobuf:"varint,14,opt,name=open,proto3" json:"open,omitempty"`
	// Total count of issues in the Confirmed state.
	Confirmed uint32 `protobuf:"varint,15,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Total count of issues in the Reopened state
	Reopened uint32 `protobuf:"varint,16,opt,name=reopened,proto3" json:"reopened,omitempty"`
	// Optional list of findings (issues)
	Findings []*Finding `protobuf:"bytes,17,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Issues) Reset() {
	*x = Issues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issues) ProtoMessage() {}

func (x *Issues) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issues.ProtoReflect.Descriptor instead.
func (*Issues) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{6}
}

func (x *Issues) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Issues) GetNewTotal() uint32 {
	if x != nil {
		return x.NewTotal
	}
	return 0
}

func (x *Issues) GetBlocker() uint32 {
	if x != nil {
		return x.Blocker
	}
	return 0
}

func (x *Issues) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *Issues) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Issues) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Issues) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

func (x *Issues) GetNewBlocker() uint32 {
	if x != nil {
		return x.NewBlocker
	}
	return 0
}

func (x *Issues) GetNewCritical() uint32 {
	if x != nil {
		return x.NewCritical
	}
	return 0
}

func (x *Issues) GetNewMajor() uint32 {
	if x != nil {
		return x.NewMajor
	}
	return 0
}

func (x *Issues) GetNewMinor() uint32 {
	if x != nil {
		return x.NewMinor
	}
	return 0
}

func (x *Issues) GetNewInfo() uint32 {
	if x != nil {
		return x.NewInfo
	}
	return 0
}

func (x *Issues) GetFalsePositives() uint32 {
	if x != nil {
		return x.FalsePositives
	}
	return 0
}

func (x *Issues) GetOpen() uint32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Issues) GetConfirmed() uint32 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *Issues) GetReopened() uint32 {
	if x != nil {
		return x.Reopened
	}
	return 0
}

func (x *Issues) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Tests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// On each line of code containing some boolean expressions, the condition coverage simply answers the following question: 'Has each boolean expression been evaluated both to true and false?'. This is the density of possible conditions in flow control structures that have been followed during unit tests execution.
	ConditionCoverage float32 `protobuf:"fixed32,1,opt,name=condition_coverage,json=conditionCoverage,proto3" json:"condition_coverage,omitempty"`
	// Identical to Condition coverage but restricted to new / updated source code.
	NewConitionCoverage float32 `protobuf:"fixed32,2,opt,name=new_conition_coverage,json=newConitionCoverage,proto3" json:"new_conition_coverage,omitempty"`
	// XXXXXXXXX List of covered conditions.
	ConditionCoverageHits string `protobuf:"bytes,3,opt,name=condition_coverage_hits,json=conditionCoverageHits,proto3" json:"condition_coverage_hits,omitempty"`
	// XXXXXXXXX Number of conditions by line.
	ConditionsByLine uint32 `protobuf:"varint,4,opt,name=conditions_by_line,json=conditionsByLine,proto3" json:"conditions_by_line,omitempty"`
	// XXXXXXXXXX Number of covered conditions by line.
	CoveredConditionsByLine uint32 `protobuf:"varint,5,opt,name=covered_conditions_by_line,json=coveredConditionsByLine,proto3" json:"covered_conditions_by_line,omitempty"`
	// XXXXXXXXXX It is a mix of Line coverage and Condition coverage. Its goal is to provide an even more accurate answer to the following question: How much of the source code has been covered by the unit tests?
	Coverage float32 `protobuf:"fixed32,6,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Identical to Coverage but restricted to new / updated source code.
	NewCoverage float32 `protobuf:"fixed32,8,opt,name=new_coverage,json=newCoverage,proto3" json:"new_coverage,omitempty"`
	// On a given line of code, Line coverage simply answers the following question: Has this line of code been executed during the execution of the unit tests?.
	LineCoverage float32 `protobuf:"fixed32,9,opt,name=line_coverage,json=lineCoverage,proto3" json:"line_coverage,omitempty"`
	// Identical to Line coverage but restricted to new / updated source code.
	NewLineCoverage float32 `protobuf:"fixed32,10,opt,name=new_line_coverage,json=newLineCoverage,proto3" json:"new_line_coverage,omitempty"`
	// Number of lines of code which could be covered by unit tests (for example, blank lines or full comments lines are not considered as lines to cover).
	LinesToCover uint32 `protobuf:"varint,11,opt,name=lines_to_cover,json=linesToCover,proto3" json:"lines_to_cover,omitempty"`
	// Identical to Lines to cover but restricted to new / updated source code.
	NewLinesToCover uint32 `protobuf:"varint,12,opt,name=new_lines_to_cover,json=newLinesToCover,proto3" json:"new_lines_to_cover,omitempty"`
	//Number of skipped unit tests.
	SkippedTests uint32 `protobuf:"varint,13,opt,name=skipped_tests,json=skippedTests,proto3" json:"skipped_tests,omitempty"`
	// Number of conditions which are not covered by unit tests.
	UncoveredConditions uint32 `protobuf:"varint,14,opt,name=uncovered_conditions,json=uncoveredConditions,proto3" json:"uncovered_conditions,omitempty"`
	// Identical to Uncovered conditions but restricted to new / updated source code.
	NewUncoveredConditions uint32 `protobuf:"varint,15,opt,name=new_uncovered_conditions,json=newUncoveredConditions,proto3" json:"new_uncovered_conditions,omitempty"`
	// Number of lines of code which are not covered by unit tests.
	UncoveredLines uint32 `protobuf:"varint,16,opt,name=uncovered_lines,json=uncoveredLines,proto3" json:"uncovered_lines,omitempty"`
	// Identical to Uncovered lines but restricted to new / updated source code.
	NewUncoveredLines uint32 `protobuf:"varint,17,opt,name=new_uncovered_lines,json=newUncoveredLines,proto3" json:"new_uncovered_lines,omitempty"`
	// Number of unit tests.
	Tests uint32 `protobuf:"varint,18,opt,name=tests,proto3" json:"tests,omitempty"`
	// Time required to execute all the unit tests. Milliseconds
	TestExecutionTime uint64 `protobuf:"varint,19,opt,name=test_execution_time,json=testExecutionTime,proto3" json:"test_execution_time,omitempty"`
	// Number of unit tests that have failed.
	TestErrors uint32 `protobuf:"varint,20,opt,name=test_errors,json=testErrors,proto3" json:"test_errors,omitempty"`
	// Number of unit tests that have failed with an unexpected exception.
	TestFailures uint32 `protobuf:"varint,21,opt,name=test_failures,json=testFailures,proto3" json:"test_failures,omitempty"`
	// Test success density = (Unit tests - (Unit test errors + Unit test failures)) / Unit tests * 100
	TestSuccessDensity float32 `protobuf:"fixed32,22,opt,name=test_success_density,json=testSuccessDensity,proto3" json:"test_success_density,omitempty"`
}

func (x *Tests) Reset() {
	*x = Tests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tests) ProtoMessage() {}

func (x *Tests) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tests.ProtoReflect.Descriptor instead.
func (*Tests) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{7}
}

func (x *Tests) GetConditionCoverage() float32 {
	if x != nil {
		return x.ConditionCoverage
	}
	return 0
}

func (x *Tests) GetNewConitionCoverage() float32 {
	if x != nil {
		return x.NewConitionCoverage
	}
	return 0
}

func (x *Tests) GetConditionCoverageHits() string {
	if x != nil {
		return x.ConditionCoverageHits
	}
	return ""
}

func (x *Tests) GetConditionsByLine() uint32 {
	if x != nil {
		return x.ConditionsByLine
	}
	return 0
}

func (x *Tests) GetCoveredConditionsByLine() uint32 {
	if x != nil {
		return x.CoveredConditionsByLine
	}
	return 0
}

func (x *Tests) GetCoverage() float32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *Tests) GetNewCoverage() float32 {
	if x != nil {
		return x.NewCoverage
	}
	return 0
}

func (x *Tests) GetLineCoverage() float32 {
	if x != nil {
		return x.LineCoverage
	}
	return 0
}

func (x *Tests) GetNewLineCoverage() float32 {
	if x != nil {
		return x.NewLineCoverage
	}
	return 0
}

func (x *Tests) GetLinesToCover() uint32 {
	if x != nil {
		return x.LinesToCover
	}
	return 0
}

func (x *Tests) GetNewLinesToCover() uint32 {
	if x != nil {
		return x.NewLinesToCover
	}
	return 0
}

func (x *Tests) GetSkippedTests() uint32 {
	if x != nil {
		return x.SkippedTests
	}
	return 0
}

func (x *Tests) GetUncoveredConditions() uint32 {
	if x != nil {
		return x.UncoveredConditions
	}
	return 0
}

func (x *Tests) GetNewUncoveredConditions() uint32 {
	if x != nil {
		return x.NewUncoveredConditions
	}
	return 0
}

func (x *Tests) GetUncoveredLines() uint32 {
	if x != nil {
		return x.UncoveredLines
	}
	return 0
}

func (x *Tests) GetNewUncoveredLines() uint32 {
	if x != nil {
		return x.NewUncoveredLines
	}
	return 0
}

func (x *Tests) GetTests() uint32 {
	if x != nil {
		return x.Tests
	}
	return 0
}

func (x *Tests) GetTestExecutionTime() uint64 {
	if x != nil {
		return x.TestExecutionTime
	}
	return 0
}

func (x *Tests) GetTestErrors() uint32 {
	if x != nil {
		return x.TestErrors
	}
	return 0
}

func (x *Tests) GetTestFailures() uint32 {
	if x != nil {
		return x.TestFailures
	}
	return 0
}

func (x *Tests) GetTestSuccessDensity() float32 {
	if x != nil {
		return x.TestSuccessDensity
	}
	return 0
}

// QualityGate provides information about the quality gate and its status
type QualityGate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the quality gate used
	QualityGateName string `protobuf:"bytes,1,opt,name=quality_gate_name,json=qualityGateName,proto3" json:"quality_gate_name,omitempty"`
	// Name of the quality profile used
	QualityProfileName string `protobuf:"bytes,2,opt,name=quality_profile_name,json=qualityProfileName,proto3" json:"quality_profile_name,omitempty"`
	// State of the Quality Gate associated to your Project. Possible values are : ERROR, OK WARN value has been removed since 7.6.
	QualityGateStatus string `protobuf:"bytes,3,opt,name=quality_gate_status,json=qualityGateStatus,proto3" json:"quality_gate_status,omitempty"`
	// For all the conditions of your Quality Gate, you know which condition is failing and which is not.
	QualityGateDetails string `protobuf:"bytes,4,opt,name=quality_gate_details,json=qualityGateDetails,proto3" json:"quality_gate_details,omitempty"`
}

func (x *QualityGate) Reset() {
	*x = QualityGate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityGate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityGate) ProtoMessage() {}

func (x *QualityGate) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityGate.ProtoReflect.Descriptor instead.
func (*QualityGate) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{8}
}

func (x *QualityGate) GetQualityGateName() string {
	if x != nil {
		return x.QualityGateName
	}
	return ""
}

func (x *QualityGate) GetQualityProfileName() string {
	if x != nil {
		return x.QualityProfileName
	}
	return ""
}

func (x *QualityGate) GetQualityGateStatus() string {
	if x != nil {
		return x.QualityGateStatus
	}
	return ""
}

func (x *QualityGate) GetQualityGateDetails() string {
	if x != nil {
		return x.QualityGateDetails
	}
	return ""
}

// FileLocation defines the exact location for a given analysis result.
type FileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute File system path.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// File line number.
	LineNumber uint64 `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	// Start index within the line number.
	StartColumn uint32 `protobuf:"varint,3,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	// End index within the line number.
	EndColumn uint32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *FileLocation) Reset() {
	*x = FileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocation) ProtoMessage() {}

func (x *FileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocation.ProtoReflect.Descriptor instead.
func (*FileLocation) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{9}
}

func (x *FileLocation) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileLocation) GetLineNumber() uint64 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *FileLocation) GetStartColumn() uint32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *FileLocation) GetEndColumn() uint32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File location of the analsys results.
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation,proto3" json:"file_location,omitempty"`
	// A name or title of the finding
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier for the finding
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// A description for the finding
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{10}
}

func (x *Finding) GetFileLocation() *FileLocation {
	if x != nil {
		return x.FileLocation
	}
	return nil
}

func (x *Finding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Finding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Finding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Static Analysis statistics.
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cyclomatic and cognitive complexity stats
	Complexity *Complexity `protobuf:"bytes,1,opt,name=complexity,proto3" json:"complexity,omitempty"`
	// Code duplication
	Duplication *Duplication `protobuf:"bytes,2,opt,name=duplication,proto3" json:"duplication,omitempty"`
	// Software Quality Assessment based on Lifecycle Expectations (SQALE)
	Maintainability *Maintainability `protobuf:"bytes,3,opt,name=maintainability,proto3" json:"maintainability,omitempty"`
	// Reliability stats
	Reliability *Reliability `protobuf:"bytes,4,opt,name=reliability,proto3" json:"reliability,omitempty"`
	// Security stats
	Security *Security `protobuf:"bytes,5,opt,name=security,proto3" json:"security,omitempty"`
	// Code size
	CodeSize *CodeSize `protobuf:"bytes,6,opt,name=code_size,json=codeSize,proto3" json:"code_size,omitempty"`
	// Issues found
	Issues *Issues `protobuf:"bytes,7,opt,name=issues,proto3" json:"issues,omitempty"`
	// Quality Gate information
	QualityGate *QualityGate `protobuf:"bytes,8,opt,name=quality_gate,json=qualityGate,proto3" json:"quality_gate,omitempty"`
	// Tests stats
	Tests *Tests `protobuf:"bytes,9,opt,name=tests,proto3" json:"tests,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{11}
}

func (x *Stats) GetComplexity() *Complexity {
	if x != nil {
		return x.Complexity
	}
	return nil
}

func (x *Stats) GetDuplication() *Duplication {
	if x != nil {
		return x.Duplication
	}
	return nil
}

func (x *Stats) GetMaintainability() *Maintainability {
	if x != nil {
		return x.Maintainability
	}
	return nil
}

func (x *Stats) GetReliability() *Reliability {
	if x != nil {
		return x.Reliability
	}
	return nil
}

func (x *Stats) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Stats) GetCodeSize() *CodeSize {
	if x != nil {
		return x.CodeSize
	}
	return nil
}

func (x *Stats) GetIssues() *Issues {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *Stats) GetQualityGate() *QualityGate {
	if x != nil {
		return x.QualityGate
	}
	return nil
}

func (x *Stats) GetTests() *Tests {
	if x != nil {
		return x.Tests
	}
	return nil
}

// StaticAnalysis is the Note for static analyses on pieces of code.
type StaticAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analysis tool involved.
	Tool string `protobuf:"bytes,1,opt,name=tool,proto3" json:"tool,omitempty"`
	// Version of the analysis tool used.
	ToolVersion string `protobuf:"bytes,2,opt,name=tool_version,json=toolVersion,proto3" json:"tool_version,omitempty"`
	// Analysis tool configuration at the time of the analysis run.
	ToolConfig string `protobuf:"bytes,3,opt,name=tool_config,json=toolConfig,proto3" json:"tool_config,omitempty"`
	// Overall code quality stats
	Summary *Stats `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	//Source context were the analysis ran.
	Context *source_go_proto.SourceContext `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// Time at which execution of the analysis was started.
	StartTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time at which execution of the analysis was finished.
	EndTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *StaticAnalysis) Reset() {
	*x = StaticAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalysis) ProtoMessage() {}

func (x *StaticAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalysis.ProtoReflect.Descriptor instead.
func (*StaticAnalysis) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{12}
}

func (x *StaticAnalysis) GetTool() string {
	if x != nil {
		return x.Tool
	}
	return ""
}

func (x *StaticAnalysis) GetToolVersion() string {
	if x != nil {
		return x.ToolVersion
	}
	return ""
}

func (x *StaticAnalysis) GetToolConfig() string {
	if x != nil {
		return x.ToolConfig
	}
	return ""
}

func (x *StaticAnalysis) GetSummary() *Stats {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *StaticAnalysis) GetContext() *source_go_proto.SourceContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *StaticAnalysis) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StaticAnalysis) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Details is an Occurrence that contains the static analysis results.
type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalysisResults *StaticAnalysis `protobuf:"bytes,1,opt,name=analysis_results,json=analysisResults,proto3" json:"analysis_results,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{13}
}

func (x *Details) GetAnalysisResults() *StaticAnalysis {
	if x != nil {
		return x.AnalysisResults
	}
	return nil
}

var File_static_analysis_proto protoreflect.FileDescriptor

var file_static_analysis_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6d,
	0x65, 0x6c, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61,
	0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e,
	0x65, 0x77, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x71, 0x61, 0x6c, 0x65,
	0x44, 0x65, 0x62, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x53, 0x71, 0x61, 0x6c,
	0x65, 0x44, 0x65, 0x62, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x9e, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x62, 0x75, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x75, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x67, 0x73, 0x12,
	0x3f, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x5d, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x52, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x4b,
	0x0a, 0x22, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6e, 0x65, 0x77, 0x52,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xe8, 0x05, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f,
	0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68,
	0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6e, 0x65, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x6f, 0x74, 0x73, 0x70,
	0x6f, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x64, 0x0a, 0x1a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x17, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xe5, 0x02, 0x0a,
	0x08, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x63,
	0x6c, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x63, 0x6c, 0x6f, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x87, 0x04, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61,
	0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x99,
	0x07, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e,
	0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x65, 0x77,
	0x55, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x65, 0x77, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x55, 0x6e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x07,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xaf, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x61, 0x66,
	0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x61,
	0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x47, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x05, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5a,
	0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x2b, 0x0a, 0x06, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42,
	0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10, 0x03,
	0x12, 0x05, 0x0a, 0x01, 0x45, 0x10, 0x04, 0x42, 0x6f, 0x0a, 0x22, 0x69, 0x6f, 0x2e, 0x67, 0x72,
	0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x01, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66,
	0x65, 0x61, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0xa2, 0x02, 0x03, 0x47, 0x52, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_static_analysis_proto_rawDescOnce sync.Once
	file_static_analysis_proto_rawDescData = file_static_analysis_proto_rawDesc
)

func file_static_analysis_proto_rawDescGZIP() []byte {
	file_static_analysis_proto_rawDescOnce.Do(func() {
		file_static_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_static_analysis_proto_rawDescData)
	})
	return file_static_analysis_proto_rawDescData
}

var file_static_analysis_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_static_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_static_analysis_proto_goTypes = []interface{}{
	(Rating)(0),                           // 0: grafeas.v1beta1.static_analysis.Rating
	(*Complexity)(nil),                    // 1: grafeas.v1beta1.static_analysis.Complexity
	(*Duplication)(nil),                   // 2: grafeas.v1beta1.static_analysis.Duplication
	(*Maintainability)(nil),               // 3: grafeas.v1beta1.static_analysis.Maintainability
	(*Reliability)(nil),                   // 4: grafeas.v1beta1.static_analysis.Reliability
	(*Security)(nil),                      // 5: grafeas.v1beta1.static_analysis.Security
	(*CodeSize)(nil),                      // 6: grafeas.v1beta1.static_analysis.CodeSize
	(*Issues)(nil),                        // 7: grafeas.v1beta1.static_analysis.Issues
	(*Tests)(nil),                         // 8: grafeas.v1beta1.static_analysis.Tests
	(*QualityGate)(nil),                   // 9: grafeas.v1beta1.static_analysis.QualityGate
	(*FileLocation)(nil),                  // 10: grafeas.v1beta1.static_analysis.FileLocation
	(*Finding)(nil),                       // 11: grafeas.v1beta1.static_analysis.Finding
	(*Stats)(nil),                         // 12: grafeas.v1beta1.static_analysis.Stats
	(*StaticAnalysis)(nil),                // 13: grafeas.v1beta1.static_analysis.StaticAnalysis
	(*Details)(nil),                       // 14: grafeas.v1beta1.static_analysis.Details
	(*source_go_proto.SourceContext)(nil), // 15: grafeas.v1beta1.source.SourceContext
	(*timestamp.Timestamp)(nil),           // 16: google.protobuf.Timestamp
}
var file_static_analysis_proto_depIdxs = []int32{
	11, // 0: grafeas.v1beta1.static_analysis.Complexity.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	11, // 1: grafeas.v1beta1.static_analysis.Duplication.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	0,  // 2: grafeas.v1beta1.static_analysis.Maintainability.sqale_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	11, // 3: grafeas.v1beta1.static_analysis.Maintainability.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	0,  // 4: grafeas.v1beta1.static_analysis.Reliability.rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	0,  // 5: grafeas.v1beta1.static_analysis.Reliability.new_reliability_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	11, // 6: grafeas.v1beta1.static_analysis.Reliability.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	0,  // 7: grafeas.v1beta1.static_analysis.Security.security_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	0,  // 8: grafeas.v1beta1.static_analysis.Security.security_review_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	0,  // 9: grafeas.v1beta1.static_analysis.Security.new_security_review_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	11, // 10: grafeas.v1beta1.static_analysis.Security.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	11, // 11: grafeas.v1beta1.static_analysis.CodeSize.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	11, // 12: grafeas.v1beta1.static_analysis.Issues.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	10, // 13: grafeas.v1beta1.static_analysis.Finding.file_location:type_name -> grafeas.v1beta1.static_analysis.FileLocation
	1,  // 14: grafeas.v1beta1.static_analysis.Stats.complexity:type_name -> grafeas.v1beta1.static_analysis.Complexity
	2,  // 15: grafeas.v1beta1.static_analysis.Stats.duplication:type_name -> grafeas.v1beta1.static_analysis.Duplication
	3,  // 16: grafeas.v1beta1.static_analysis.Stats.maintainability:type_name -> grafeas.v1beta1.static_analysis.Maintainability
	4,  // 17: grafeas.v1beta1.static_analysis.Stats.reliability:type_name -> grafeas.v1beta1.static_analysis.Reliability
	5,  // 18: grafeas.v1beta1.static_analysis.Stats.security:type_name -> grafeas.v1beta1.static_analysis.Security
	6,  // 19: grafeas.v1beta1.static_analysis.Stats.code_size:type_name -> grafeas.v1beta1.static_analysis.CodeSize
	7,  // 20: grafeas.v1beta1.static_analysis.Stats.issues:type_name -> grafeas.v1beta1.static_analysis.Issues
	9,  // 21: grafeas.v1beta1.static_analysis.Stats.quality_gate:type_name -> grafeas.v1beta1.static_analysis.QualityGate
	8,  // 22: grafeas.v1beta1.static_analysis.Stats.tests:type_name -> grafeas.v1beta1.static_analysis.Tests
	12, // 23: grafeas.v1beta1.static_analysis.StaticAnalysis.summary:type_name -> grafeas.v1beta1.static_analysis.Stats
	15, // 24: grafeas.v1beta1.static_analysis.StaticAnalysis.context:type_name -> grafeas.v1beta1.source.SourceContext
	16, // 25: grafeas.v1beta1.static_analysis.StaticAnalysis.start_time:type_name -> google.protobuf.Timestamp
	16, // 26: grafeas.v1beta1.static_analysis.StaticAnalysis.end_time:type_name -> google.protobuf.Timestamp
	13, // 27: grafeas.v1beta1.static_analysis.Details.analysis_results:type_name -> grafeas.v1beta1.static_analysis.StaticAnalysis
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_static_analysis_proto_init() }
func file_static_analysis_proto_init() {
	if File_static_analysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_static_analysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Complexity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintainability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityGate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_static_analysis_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_static_analysis_proto_goTypes,
		DependencyIndexes: file_static_analysis_proto_depIdxs,
		EnumInfos:         file_static_analysis_proto_enumTypes,
		MessageInfos:      file_static_analysis_proto_msgTypes,
	}.Build()
	File_static_analysis_proto = out.File
	file_static_analysis_proto_rawDesc = nil
	file_static_analysis_proto_goTypes = nil
	file_static_analysis_proto_depIdxs = nil
}
