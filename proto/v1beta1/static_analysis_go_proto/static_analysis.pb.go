// Copyright 2020 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This metadata type is heavily inspired and based on https://docs.sonarqube.org/latest/user-guide/metric-definitions/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: static_analysis.proto

package static_analysis_go_proto

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	source_go_proto "github.com/grafeas/grafeas/proto/v1beta1/source_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Rating defines a common scoring system to use in different code quality dimensions.
type Rating int32

const (
	Rating_A Rating = 0
	Rating_B Rating = 1
	Rating_C Rating = 2
	Rating_D Rating = 3
	Rating_E Rating = 4
)

// Enum value maps for Rating.
var (
	Rating_name = map[int32]string{
		0: "A",
		1: "B",
		2: "C",
		3: "D",
		4: "E",
	}
	Rating_value = map[string]int32{
		"A": 0,
		"B": 1,
		"C": 2,
		"D": 3,
		"E": 4,
	}
)

func (x Rating) Enum() *Rating {
	p := new(Rating)
	*p = x
	return p
}

func (x Rating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rating) Descriptor() protoreflect.EnumDescriptor {
	return file_static_analysis_proto_enumTypes[0].Descriptor()
}

func (Rating) Type() protoreflect.EnumType {
	return &file_static_analysis_proto_enumTypes[0]
}

func (x Rating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rating.Descriptor instead.
func (Rating) EnumDescriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{0}
}

// Code Complexity
type Complexity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cyclomatic Complexity calculated based on the number of paths through the code.
	// Whenever the control flow of a function splits, the complexity counter gets incremented by one.
	// Each function has a minimum complexity of 1.
	// This calculation varies slightly by language because keywords and functionalities do.
	Cyclomatic uint32 `protobuf:"varint,1,opt,name=cyclomatic,proto3" json:"cyclomatic,omitempty"`
	// How hard it is to understand the code's control flow.
	// See https://www.sonarsource.com/resources/white-papers/cognitive-complexity.html
	// for a complete description of the mathematical model applied to compute this measure.
	Cognitive uint32 `protobuf:"varint,2,opt,name=cognitive,proto3" json:"cognitive,omitempty"`
	// Optional list of findings (complexities)
	Findings []*Finding `protobuf:"bytes,3,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Complexity) Reset() {
	*x = Complexity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Complexity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Complexity) ProtoMessage() {}

func (x *Complexity) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Complexity.ProtoReflect.Descriptor instead.
func (*Complexity) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *Complexity) GetCyclomatic() uint32 {
	if x != nil {
		return x.Cyclomatic
	}
	return 0
}

func (x *Complexity) GetCognitive() uint32 {
	if x != nil {
		return x.Cognitive
	}
	return 0
}

func (x *Complexity) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

// Code duplication
type Duplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of duplicated blocks of lines.
	Blocks uint32 `protobuf:"varint,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// Number of files involved in duplications.
	Files uint32 `protobuf:"varint,2,opt,name=files,proto3" json:"files,omitempty"`
	// Number of lines involved in duplications.
	Lines uint32 `protobuf:"varint,3,opt,name=lines,proto3" json:"lines,omitempty"`
	// The ratio of duplicated lines in relation to the total number of lines.
	// duplicated_lines / lines * 100
	LinesDensity float32 `protobuf:"fixed32,4,opt,name=lines_density,json=linesDensity,proto3" json:"lines_density,omitempty"`
	// Optional list of findings (duplications)
	Findings []*Finding `protobuf:"bytes,5,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Duplication) Reset() {
	*x = Duplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duplication) ProtoMessage() {}

func (x *Duplication) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duplication.ProtoReflect.Descriptor instead.
func (*Duplication) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *Duplication) GetBlocks() uint32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *Duplication) GetFiles() uint32 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *Duplication) GetLines() uint32 {
	if x != nil {
		return x.Lines
	}
	return 0
}

func (x *Duplication) GetLinesDensity() float32 {
	if x != nil {
		return x.LinesDensity
	}
	return 0
}

func (x *Duplication) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

// Maintainability of the code or Software Quality Assessment based on Lifecycle Expectations (SQALE)
type Maintainability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of Code Smell issues.
	CodeSmells uint64 `protobuf:"varint,1,opt,name=code_smells,json=codeSmells,proto3" json:"code_smells,omitempty"`
	// Rating given to your project related to the value of your sqale_debt_ratio. Values can be A, B, C, D or E.
	SqaleRating Rating `protobuf:"varint,2,opt,name=sqale_rating,json=sqaleRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"sqale_rating,omitempty"`
	// Effort to fix all Code Smells, in minutes.
	SqaleIndex uint32 `protobuf:"varint,4,opt,name=sqale_index,json=sqaleIndex,proto3" json:"sqale_index,omitempty"`
	// Ratio between the cost to develop the software and the cost to fix it.
	// Ratio formula is: Remediation cost / Development cost
	// Which can be restated as:
	// Remediation cost / (Cost to develop 1 line of code * Number of lines of code)
	// The value of the cost to develop a line of code is 0.06 days.
	SqaleDebtRatio float32 `protobuf:"fixed32,5,opt,name=sqale_debt_ratio,json=sqaleDebtRatio,proto3" json:"sqale_debt_ratio,omitempty"`
	// Optional list of findings (code smells)
	Findings []*Finding `protobuf:"bytes,6,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Maintainability) Reset() {
	*x = Maintainability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintainability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainability) ProtoMessage() {}

func (x *Maintainability) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainability.ProtoReflect.Descriptor instead.
func (*Maintainability) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *Maintainability) GetCodeSmells() uint64 {
	if x != nil {
		return x.CodeSmells
	}
	return 0
}

func (x *Maintainability) GetSqaleRating() Rating {
	if x != nil {
		return x.SqaleRating
	}
	return Rating_A
}

func (x *Maintainability) GetSqaleIndex() uint32 {
	if x != nil {
		return x.SqaleIndex
	}
	return 0
}

func (x *Maintainability) GetSqaleDebtRatio() float32 {
	if x != nil {
		return x.SqaleDebtRatio
	}
	return 0
}

func (x *Maintainability) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Reliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of bug issues.
	Bugs uint32 `protobuf:"varint,1,opt,name=bugs,proto3" json:"bugs,omitempty"`
	// Rating given based on the number of bugs and their criticality
	Rating Rating `protobuf:"varint,2,opt,name=rating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"rating,omitempty"`
	// Effort to fix all bug issues, in minutes.
	RemediationEffort uint32 `protobuf:"varint,3,opt,name=remediation_effort,json=remediationEffort,proto3" json:"remediation_effort,omitempty"`
	// Optional list of findings (bugs)
	Findings []*Finding `protobuf:"bytes,4,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Reliability) Reset() {
	*x = Reliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reliability) ProtoMessage() {}

func (x *Reliability) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reliability.ProtoReflect.Descriptor instead.
func (*Reliability) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *Reliability) GetBugs() uint32 {
	if x != nil {
		return x.Bugs
	}
	return 0
}

func (x *Reliability) GetRating() Rating {
	if x != nil {
		return x.Rating
	}
	return Rating_A
}

func (x *Reliability) GetRemediationEffort() uint32 {
	if x != nil {
		return x.RemediationEffort
	}
	return 0
}

func (x *Reliability) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of vulnerability issues.
	Vulnerabilities uint32 `protobuf:"varint,1,opt,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	// Security rating letter.
	SecurityRating Rating `protobuf:"varint,2,opt,name=security_rating,json=securityRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"security_rating,omitempty"`
	// Effort to fix all vulnerability issues, in minutes
	SecurityRemediationEffort uint32 `protobuf:"varint,3,opt,name=security_remediation_effort,json=securityRemediationEffort,proto3" json:"security_remediation_effort,omitempty"`
	SecurityReviewRating      Rating `protobuf:"varint,4,opt,name=security_review_rating,json=securityReviewRating,proto3,enum=grafeas.v1beta1.static_analysis.Rating" json:"security_review_rating,omitempty"`
	// Optional list of findings (vulnerabilites)
	Findings []*Finding `protobuf:"bytes,5,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{4}
}

func (x *Security) GetVulnerabilities() uint32 {
	if x != nil {
		return x.Vulnerabilities
	}
	return 0
}

func (x *Security) GetSecurityRating() Rating {
	if x != nil {
		return x.SecurityRating
	}
	return Rating_A
}

func (x *Security) GetSecurityRemediationEffort() uint32 {
	if x != nil {
		return x.SecurityRemediationEffort
	}
	return 0
}

func (x *Security) GetSecurityReviewRating() Rating {
	if x != nil {
		return x.SecurityReviewRating
	}
	return Rating_A
}

func (x *Security) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type CodeSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of classes
	Classes uint32 `protobuf:"varint,1,opt,name=classes,proto3" json:"classes,omitempty"`
	// Number of lines containing either comment or commented-out code.
	// Non-significant comment lines (empty comment lines, comment lines containing only
	// special characters, etc.) do not increase the number of comment lines.
	CommentLines uint32 `protobuf:"varint,2,opt,name=comment_lines,json=commentLines,proto3" json:"comment_lines,omitempty"`
	// Density of comment lines = Comment lines / (Lines of code + Comment lines) * 100
	// With such a formula:
	// 50% means that the number of lines of code equals the number of comment lines
	// 100% means that the file only contains comment lines
	CommentLinesDensity float32 `protobuf:"fixed32,3,opt,name=comment_lines_density,json=commentLinesDensity,proto3" json:"comment_lines_density,omitempty"`
	// Number of directories.
	Directories uint32 `protobuf:"varint,4,opt,name=directories,proto3" json:"directories,omitempty"`
	// Number of files.
	Files uint64 `protobuf:"varint,5,opt,name=files,proto3" json:"files,omitempty"`
	// Number of physical lines (number of carriage returns).
	Lines uint64 `protobuf:"varint,6,opt,name=lines,proto3" json:"lines,omitempty"`
	// Lines of code. Number of physical lines that contain at least one character which is neither a whitespace nor
	// a tabulation nor part of a comment.
	Ncloc uint64 `protobuf:"varint,7,opt,name=ncloc,proto3" json:"ncloc,omitempty"`
	// Number of functions. Depending on the language, a function is either a function or a method or a paragraph.
	Functions uint64 `protobuf:"varint,8,opt,name=functions,proto3" json:"functions,omitempty"`
	// Number of statements.
	Statements uint64 `protobuf:"varint,9,opt,name=statements,proto3" json:"statements,omitempty"`
	// Optional list of findings (code size)
	Findings []*Finding `protobuf:"bytes,10,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *CodeSize) Reset() {
	*x = CodeSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSize) ProtoMessage() {}

func (x *CodeSize) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSize.ProtoReflect.Descriptor instead.
func (*CodeSize) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{5}
}

func (x *CodeSize) GetClasses() uint32 {
	if x != nil {
		return x.Classes
	}
	return 0
}

func (x *CodeSize) GetCommentLines() uint32 {
	if x != nil {
		return x.CommentLines
	}
	return 0
}

func (x *CodeSize) GetCommentLinesDensity() float32 {
	if x != nil {
		return x.CommentLinesDensity
	}
	return 0
}

func (x *CodeSize) GetDirectories() uint32 {
	if x != nil {
		return x.Directories
	}
	return 0
}

func (x *CodeSize) GetFiles() uint64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *CodeSize) GetLines() uint64 {
	if x != nil {
		return x.Lines
	}
	return 0
}

func (x *CodeSize) GetNcloc() uint64 {
	if x != nil {
		return x.Ncloc
	}
	return 0
}

func (x *CodeSize) GetFunctions() uint64 {
	if x != nil {
		return x.Functions
	}
	return 0
}

func (x *CodeSize) GetStatements() uint64 {
	if x != nil {
		return x.Statements
	}
	return 0
}

func (x *CodeSize) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

type Issues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of issues in all states.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Total count of blocking issues.
	Blocker uint32 `protobuf:"varint,2,opt,name=blocker,proto3" json:"blocker,omitempty"`
	// Total count of critical issues.
	Critical uint32 `protobuf:"varint,3,opt,name=critical,proto3" json:"critical,omitempty"`
	// Total count of major issues.
	Major uint32 `protobuf:"varint,4,opt,name=major,proto3" json:"major,omitempty"`
	// Total count of minor issues.
	Minor uint32 `protobuf:"varint,5,opt,name=minor,proto3" json:"minor,omitempty"`
	// Total count of info issues.
	Info uint32 `protobuf:"varint,6,opt,name=info,proto3" json:"info,omitempty"`
	// Total count of issues marked False Positive.
	FalsePositives uint32 `protobuf:"varint,7,opt,name=false_positives,json=falsePositives,proto3" json:"false_positives,omitempty"`
	// Total count of issues in the Open state.
	Open uint32 `protobuf:"varint,8,opt,name=open,proto3" json:"open,omitempty"`
	// Total count of issues in the Confirmed state.
	Confirmed uint32 `protobuf:"varint,9,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Total count of issues in the Reopened state
	Reopened uint32 `protobuf:"varint,10,opt,name=reopened,proto3" json:"reopened,omitempty"`
	// Optional list of findings (issues)
	Findings []*Finding `protobuf:"bytes,11,rep,name=findings,proto3" json:"findings,omitempty"`
}

func (x *Issues) Reset() {
	*x = Issues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issues) ProtoMessage() {}

func (x *Issues) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issues.ProtoReflect.Descriptor instead.
func (*Issues) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{6}
}

func (x *Issues) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Issues) GetBlocker() uint32 {
	if x != nil {
		return x.Blocker
	}
	return 0
}

func (x *Issues) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *Issues) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Issues) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Issues) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

func (x *Issues) GetFalsePositives() uint32 {
	if x != nil {
		return x.FalsePositives
	}
	return 0
}

func (x *Issues) GetOpen() uint32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Issues) GetConfirmed() uint32 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *Issues) GetReopened() uint32 {
	if x != nil {
		return x.Reopened
	}
	return 0
}

func (x *Issues) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

// FileLocation defines the exact location for a given analysis result.
type FileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute File system path.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// File line number.
	LineNumber uint64 `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	// Start index within the line number.
	StartColumn uint32 `protobuf:"varint,3,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	// End index within the line number.
	EndColumn uint32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *FileLocation) Reset() {
	*x = FileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocation) ProtoMessage() {}

func (x *FileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocation.ProtoReflect.Descriptor instead.
func (*FileLocation) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{7}
}

func (x *FileLocation) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileLocation) GetLineNumber() uint64 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *FileLocation) GetStartColumn() uint32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *FileLocation) GetEndColumn() uint32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File location of the analsys results.
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation,proto3" json:"file_location,omitempty"`
	// A name or title of the finding
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier for the finding
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// A description for the finding
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{8}
}

func (x *Finding) GetFileLocation() *FileLocation {
	if x != nil {
		return x.FileLocation
	}
	return nil
}

func (x *Finding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Finding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Finding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Static Analysis statistics.
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cyclomatic and cognitive complexity stats
	Complexity *Complexity `protobuf:"bytes,1,opt,name=complexity,proto3" json:"complexity,omitempty"`
	// Code duplication
	Duplication *Duplication `protobuf:"bytes,2,opt,name=duplication,proto3" json:"duplication,omitempty"`
	// Software Quality Assessment based on Lifecycle Expectations (SQALE)
	Maintainability *Maintainability `protobuf:"bytes,3,opt,name=maintainability,proto3" json:"maintainability,omitempty"`
	// Reliability stats
	Reliability *Reliability `protobuf:"bytes,4,opt,name=reliability,proto3" json:"reliability,omitempty"`
	// Security stats
	Security *Security `protobuf:"bytes,5,opt,name=security,proto3" json:"security,omitempty"`
	// Code size
	CodeSize *CodeSize `protobuf:"bytes,6,opt,name=code_size,json=codeSize,proto3" json:"code_size,omitempty"`
	// Issues found
	Issues *Issues `protobuf:"bytes,7,opt,name=issues,proto3" json:"issues,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{9}
}

func (x *Stats) GetComplexity() *Complexity {
	if x != nil {
		return x.Complexity
	}
	return nil
}

func (x *Stats) GetDuplication() *Duplication {
	if x != nil {
		return x.Duplication
	}
	return nil
}

func (x *Stats) GetMaintainability() *Maintainability {
	if x != nil {
		return x.Maintainability
	}
	return nil
}

func (x *Stats) GetReliability() *Reliability {
	if x != nil {
		return x.Reliability
	}
	return nil
}

func (x *Stats) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Stats) GetCodeSize() *CodeSize {
	if x != nil {
		return x.CodeSize
	}
	return nil
}

func (x *Stats) GetIssues() *Issues {
	if x != nil {
		return x.Issues
	}
	return nil
}

// StaticAnalysis is the Note for static analyses on pieces of code.
type StaticAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analysis tool involved.
	Tool string `protobuf:"bytes,1,opt,name=tool,proto3" json:"tool,omitempty"`
	// Version of the analysis tool used.
	ToolVersion string `protobuf:"bytes,2,opt,name=tool_version,json=toolVersion,proto3" json:"tool_version,omitempty"`
	// Analysis tool configuration at the time of the analysis run.
	ToolConfig string `protobuf:"bytes,3,opt,name=tool_config,json=toolConfig,proto3" json:"tool_config,omitempty"`
	// Overall code quality stats
	Summary *Stats `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	//Source context were the analysis ran.
	Context *source_go_proto.SourceContext `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	// Time at which execution of the analysis was started.
	StartTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time at which execution of the analysis was finished.
	EndTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *StaticAnalysis) Reset() {
	*x = StaticAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAnalysis) ProtoMessage() {}

func (x *StaticAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAnalysis.ProtoReflect.Descriptor instead.
func (*StaticAnalysis) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{10}
}

func (x *StaticAnalysis) GetTool() string {
	if x != nil {
		return x.Tool
	}
	return ""
}

func (x *StaticAnalysis) GetToolVersion() string {
	if x != nil {
		return x.ToolVersion
	}
	return ""
}

func (x *StaticAnalysis) GetToolConfig() string {
	if x != nil {
		return x.ToolConfig
	}
	return ""
}

func (x *StaticAnalysis) GetSummary() *Stats {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *StaticAnalysis) GetContext() *source_go_proto.SourceContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *StaticAnalysis) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StaticAnalysis) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Details is an Occurrence that contains the static analysis results.
type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalysisResults *StaticAnalysis `protobuf:"bytes,1,opt,name=analysis_results,json=analysisResults,proto3" json:"analysis_results,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_static_analysis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_static_analysis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_static_analysis_proto_rawDescGZIP(), []int{11}
}

func (x *Details) GetAnalysisResults() *StaticAnalysis {
	if x != nil {
		return x.AnalysisResults
	}
	return nil
}

var File_static_analysis_proto protoreflect.FileDescriptor

var file_static_analysis_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6d, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0c,
	0x73, 0x71, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x71, 0x61,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x71, 0x61, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x71, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x71, 0x61,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x71, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x75, 0x67, 0x73, 0x12, 0x3f, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x16,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xe5, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x63, 0x6c, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x63, 0x6c, 0x6f, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x06, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x61, 0x66,
	0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa3,
	0x01, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4b,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x61, 0x66,
	0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x2b,
	0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x00, 0x12,
	0x05, 0x0a, 0x01, 0x42, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x02, 0x12, 0x05, 0x0a,
	0x01, 0x44, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x45, 0x10, 0x04, 0x42, 0x6f, 0x0a, 0x22, 0x69,
	0x6f, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x67, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x47, 0x52, 0x41, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_static_analysis_proto_rawDescOnce sync.Once
	file_static_analysis_proto_rawDescData = file_static_analysis_proto_rawDesc
)

func file_static_analysis_proto_rawDescGZIP() []byte {
	file_static_analysis_proto_rawDescOnce.Do(func() {
		file_static_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_static_analysis_proto_rawDescData)
	})
	return file_static_analysis_proto_rawDescData
}

var file_static_analysis_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_static_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_static_analysis_proto_goTypes = []interface{}{
	(Rating)(0),                           // 0: grafeas.v1beta1.static_analysis.Rating
	(*Complexity)(nil),                    // 1: grafeas.v1beta1.static_analysis.Complexity
	(*Duplication)(nil),                   // 2: grafeas.v1beta1.static_analysis.Duplication
	(*Maintainability)(nil),               // 3: grafeas.v1beta1.static_analysis.Maintainability
	(*Reliability)(nil),                   // 4: grafeas.v1beta1.static_analysis.Reliability
	(*Security)(nil),                      // 5: grafeas.v1beta1.static_analysis.Security
	(*CodeSize)(nil),                      // 6: grafeas.v1beta1.static_analysis.CodeSize
	(*Issues)(nil),                        // 7: grafeas.v1beta1.static_analysis.Issues
	(*FileLocation)(nil),                  // 8: grafeas.v1beta1.static_analysis.FileLocation
	(*Finding)(nil),                       // 9: grafeas.v1beta1.static_analysis.Finding
	(*Stats)(nil),                         // 10: grafeas.v1beta1.static_analysis.Stats
	(*StaticAnalysis)(nil),                // 11: grafeas.v1beta1.static_analysis.StaticAnalysis
	(*Details)(nil),                       // 12: grafeas.v1beta1.static_analysis.Details
	(*source_go_proto.SourceContext)(nil), // 13: grafeas.v1beta1.source.SourceContext
	(*timestamp.Timestamp)(nil),           // 14: google.protobuf.Timestamp
}
var file_static_analysis_proto_depIdxs = []int32{
	9,  // 0: grafeas.v1beta1.static_analysis.Complexity.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	9,  // 1: grafeas.v1beta1.static_analysis.Duplication.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	0,  // 2: grafeas.v1beta1.static_analysis.Maintainability.sqale_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	9,  // 3: grafeas.v1beta1.static_analysis.Maintainability.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	0,  // 4: grafeas.v1beta1.static_analysis.Reliability.rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	9,  // 5: grafeas.v1beta1.static_analysis.Reliability.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	0,  // 6: grafeas.v1beta1.static_analysis.Security.security_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	0,  // 7: grafeas.v1beta1.static_analysis.Security.security_review_rating:type_name -> grafeas.v1beta1.static_analysis.Rating
	9,  // 8: grafeas.v1beta1.static_analysis.Security.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	9,  // 9: grafeas.v1beta1.static_analysis.CodeSize.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	9,  // 10: grafeas.v1beta1.static_analysis.Issues.findings:type_name -> grafeas.v1beta1.static_analysis.Finding
	8,  // 11: grafeas.v1beta1.static_analysis.Finding.file_location:type_name -> grafeas.v1beta1.static_analysis.FileLocation
	1,  // 12: grafeas.v1beta1.static_analysis.Stats.complexity:type_name -> grafeas.v1beta1.static_analysis.Complexity
	2,  // 13: grafeas.v1beta1.static_analysis.Stats.duplication:type_name -> grafeas.v1beta1.static_analysis.Duplication
	3,  // 14: grafeas.v1beta1.static_analysis.Stats.maintainability:type_name -> grafeas.v1beta1.static_analysis.Maintainability
	4,  // 15: grafeas.v1beta1.static_analysis.Stats.reliability:type_name -> grafeas.v1beta1.static_analysis.Reliability
	5,  // 16: grafeas.v1beta1.static_analysis.Stats.security:type_name -> grafeas.v1beta1.static_analysis.Security
	6,  // 17: grafeas.v1beta1.static_analysis.Stats.code_size:type_name -> grafeas.v1beta1.static_analysis.CodeSize
	7,  // 18: grafeas.v1beta1.static_analysis.Stats.issues:type_name -> grafeas.v1beta1.static_analysis.Issues
	10, // 19: grafeas.v1beta1.static_analysis.StaticAnalysis.summary:type_name -> grafeas.v1beta1.static_analysis.Stats
	13, // 20: grafeas.v1beta1.static_analysis.StaticAnalysis.context:type_name -> grafeas.v1beta1.source.SourceContext
	14, // 21: grafeas.v1beta1.static_analysis.StaticAnalysis.start_time:type_name -> google.protobuf.Timestamp
	14, // 22: grafeas.v1beta1.static_analysis.StaticAnalysis.end_time:type_name -> google.protobuf.Timestamp
	11, // 23: grafeas.v1beta1.static_analysis.Details.analysis_results:type_name -> grafeas.v1beta1.static_analysis.StaticAnalysis
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_static_analysis_proto_init() }
func file_static_analysis_proto_init() {
	if File_static_analysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_static_analysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Complexity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintainability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_static_analysis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_static_analysis_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_static_analysis_proto_goTypes,
		DependencyIndexes: file_static_analysis_proto_depIdxs,
		EnumInfos:         file_static_analysis_proto_enumTypes,
		MessageInfos:      file_static_analysis_proto_msgTypes,
	}.Build()
	File_static_analysis_proto = out.File
	file_static_analysis_proto_rawDesc = nil
	file_static_analysis_proto_goTypes = nil
	file_static_analysis_proto_depIdxs = nil
}
